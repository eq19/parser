name: 'Jekyll Deploy Action'
description: >
  A Github Action to deploy the Jekyll site conveniently for GitHub Pages
inputs:
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  credentials:
    description: 'The gcloud credentials'
    required: true
  repository:
    description: 'The deploy repository'
    required: false
  branch:
    description: 'The deploy branch'
    required: false
  actor:
    description: 'The github username creating the commit'
    required: false
  cname:
    description: 'The cname to use for the site'
    required: false
  bundler_ver:
    description: 'The Bundler version'
    required: false
  jekyll_baseurl:
    description: 'The Jekyll website baseurl'
    required: false
  pre_build_container:
    description: 'The pre-build docker container'
    default: 'eq19/prime'
    required: false

branding:
  icon: 'command'
  color: 'red'

runs:
  #using: 'node20'
  #main: '.github/run/main.js'
  #post: '.github/run/post.js'
  #post-if: 'success()'
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authentication    
      uses: 'google-github-actions/auth@v2'
      id: 'auth'
      with:
        credentials_json: '${{ inputs.credentials }}'

    - uses: actions/setup-node@v4
      with:
        node-version: 20
        
    #- uses: docker://postgres
      #with:
        #args: psql -U postgres -c 'SHOW config_file'
    
    # Performs a clean installation of all dependencies in the `package.json` file
    # For more information, see https://docs.npmjs.com/cli/ci.html
    - name: Install dependencies
      env:
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        # use the internal host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_HOST: host.docker.internal
     shell: bash
      run: |
        docker info
        docker image ls
        docker container ls -a
        printenv | sort
        npm install --package-lock-only pg
        #sudo -u postgres -i
        npm ci && node client.js
        
    - name: ðŸ’Ž Set parameters
      if: runner.os == 'Ubuntu'
      id: variables
      shell: bash
      run: |
        python3 -m pytest -vv test.py
      env:
        SERVICE_NAME: postgres
        EXPECTED_SERVICE_NAME: postgres
        EXPECTED_CONNECTION_URI: postgresql+psycopg2://postgres:postgres@host.docker.internal:5432/postgres?sslmode=disable
