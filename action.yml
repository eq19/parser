name: 'Jekyll Deploy Action'
description: >
  A Github Action to deploy the Jekyll site conveniently for GitHub Pages
inputs:
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  credentials:
    description: 'The gcloud credentials'
    required: true
  repository:
    description: 'The deploy repository'
    required: false
  branch:
    description: 'The deploy branch'
    required: false
  actor:
    description: 'The github username creating the commit'
    required: false
  cname:
    description: 'The cname to use for the site'
    required: false
  bundler_ver:
    description: 'The Bundler version'
    required: false
  jekyll_baseurl:
    description: 'The Jekyll website baseurl'
    required: false
  pre_build_container:
    description: 'The pre-build docker container'
    default: 'eq19/prime'
    required: false

branding:
  icon: 'command'
  color: 'red'

runs:
  #using: 'node20'
  #main: '.github/run/main.js'
  #post: '.github/run/post.js'
  #post-if: 'success()'
  using: composite
  
  steps:
    - name: Authentication    
      uses: 'google-github-actions/auth@v2'
      id: 'auth'
      with:
        credentials_json: '${{ inputs.credentials }}'

    - name: ðŸ’Ž Connect to Redis
      # Environment variable used by the `client.js` script to create a new Redis client.
      env:
        # The hostname used to communicate with the Redis service container
        # Ref: https://stackoverflow.com/a/48547074/4058484
        REDIS_PORT: 6379
        REDIS_HOST: 172.17.0.1
      run: |
        # Runs a script that creates a Redis client, populates
        # the client with data, and retrieves data
        npm install redis && node redis.js
      shell: bash
    
    - name: ðŸ’Ž Connect to postgres
      #if: runner.os == 'Ubuntu'
      env:
        # use the internal host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: postgres
        SERVICE_NAME: postgres
        POSTGRES_USER: postgres
        POSTGRES_HOST: 172.17.0.1
        POSTGRES_PASSWORD: postgres
        EXPECTED_SERVICE_NAME: postgres
        EXPECTED_CONNECTION_URI: postgresql+psycopg2://postgres:postgres@172.17.0.1:5432/postgres?sslmode=disable
      run: |
        #psql -U postgres -c 'SHOW config_file'
        npm install --package-lock-only pg && npm ci && node pg.js
        python3 -m pytest -vv test.py
      shell: bash
