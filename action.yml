name: 'Jekyll Deploy Action'
description: >
  A Github Action to deploy the Jekyll site conveniently for GitHub Pages
inputs:
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  credentials:
    description: 'The gcloud credentials'
    required: true
  repository:
    description: 'The deploy repository'
    required: false
  branch:
    description: 'The deploy branch'
    required: false
  actor:
    description: 'The github username creating the commit'
    required: false
  cname:
    description: 'The cname to use for the site'
    required: false
  bundler_ver:
    description: 'The Bundler version'
    required: false
  jekyll_baseurl:
    description: 'The Jekyll website baseurl'
    required: false
  pre_build_container:
    description: 'The pre-build docker container'
    default: 'eq19/prime'
    required: false

branding:
  icon: 'command'
  color: 'red'

runs:
  #using: 'node20'
  #main: '.github/run/main.js'
  #post: '.github/run/post.js'
  #post-if: 'success()'
  using: composite
  steps:
    - name: ðŸ’Ž Set Credential
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ inputs.credentials }}

    - name: ðŸ’Ž Authentication
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        install_components: 'alpha,cloud-datastore-emulator'

    - name: ðŸ’Ž Set parameters
      shell: bash
      id: variables
      run: |
        repo_name=${{ inputs.docker_hub_username }}/${{ inputs.image_name }}
        image_tag=${{ inputs.image_tag }}
        dev_image_tag="$image_tag"
        repo_ref="$repo_name:$image_tag"
        image_ref="${{ inputs.image_name }}:$image_tag"
        dev_repo_ref="$repo_name:$dev_image_tag"
        dev_image_ref="${{ inputs.image_name }}:$dev_image_tag"

        echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
        echo "image_tag=$image_tag" >> $GITHUB_OUTPUT
        echo "dev_image_tag=$dev_image_tag" >> $GITHUB_OUTPUT
        echo "repo_ref=$repo_ref" >> $GITHUB_OUTPUT
        echo "image_ref=$image_ref" >> $GITHUB_OUTPUT
        echo "dev_repo_ref=$dev_repo_ref" >> $GITHUB_OUTPUT
        echo "dev_image_ref=$dev_image_ref" >> $GITHUB_OUTPUT

    - name: ðŸ’Ž Self Hosted Runner
      shell: powershell
      env:
        userdata: |
          #cloud-config
          users:
          - default
          - uid: 1000
            name: vscode
            groups: admin,adm,video,docker,google-sudoers
          - uid: 2000
            name: runner
            groups: admin,adm,video,docker,google-sudoers

          write_files:
          - owner: root
            permissions: 0644
            path: /etc/systemd/system/runner.service
            content: |
              [Unit]
              Wants=gcr-online.target
              After=gcr-online.target
              Description=gcloud compute
              [Service]
              Environment="HOME=/home/runner"
              ExecStop=/usr/bin/docker stop myrunner
              ExecStopPost=/usr/bin/docker rm myrunner
              ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
              ExecStart=/usr/bin/docker run --rm --name myrunner -e RUNNER_REPLACE_EXISTING=true -e RUNNER_NAME=Google-optimized-instance -e RUNNER_WORK_DIRECTORY=_work -e ACTIONS_RUNNER_HOOK_JOB_STARTED=/opt/runner/job_started.sh -e ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/opt/runner/job_completed.sh -e RUNNER_REPOSITORY_URL=https://github.com/${{ inputs.repository }} -e GITHUB_ACCESS_TOKEN=${{ inputs.token }} -v /var/run/docker.sock:/var/run/docker.sock -v /mnt:/mnt ${{ inputs.pre_build_container }}

          runcmd:
          - systemctl daemon-reload
          - systemctl start runner.service
          - systemctl status runner.service

          bootcmd:
          - fsck.ext4 -tvy /dev/sdb1
          - mkdir -p /mnt/disks/Linux
          - mount -t ext4 -o discard,defaults /dev/sdb1 /mnt/disks/Linux

      run: |
        gcloud info
        [IO.File]::WriteAllText("cloud-config", "${env:userdata}")

    - name: ðŸ’Ž Create Runner
      shell: powershell
      run: >
        gcloud compute instances create Google-COS
        --project=feedmapping 
        --zone=us-central1-a 
        --machine-type=e2-micro
        --enable-display-device 
        --tags=https-server 
        --no-shielded-secure-boot 
        --shielded-vtpm 
        --reservation-affinity=any
        --maintenance-policy=MIGRATE 
        --provisioning-model=STANDARD 
        --shielded-integrity-monitoring 
        --labels=goog-ec-src=vm_add-gcloud 
        --scopes=https://www.googleapis.com/auth/cloud-platform 
        --service-account=project-owner@feedmapping.iam.gserviceaccount.com
        --metadata=metadata-from-file=user-data=cloud-config,google-logging-enabled=true,google-monitoring-enabled=true,enable-oslogin=true 
        --create-disk=auto-delete=yes,boot=yes,device-name=instance-template-20,image=projects/cos-cloud/global/images/cos-101-17162-127-8,mode=rw,size=10,type=projects/feedmapping/zones/us-central1-a/diskTypes/pd-standard 
        --create-disk=auto-delete=yes,boot=no,description=Deep\ Learning,device-name=persistent-disk-1,image=projects/ml-images/global/images/c1-deeplearning-tf-2-11-tpu-v20230331-debian-10,mode=rw,size=50,type=projects/feedmapping/zones/us-central1-a/diskTypes/pd-standard 
